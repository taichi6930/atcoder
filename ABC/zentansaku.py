# https://www.javadrive.jp/python/num/index4.html
# bit演算子の計算方法

# ビットOR
# ビット OR は演算子の左辺と右辺の同じ位置にあるビットを比較して、
# 少なくともビットのどちらかが 1 の場合に 1 にします。
print("10 | 12 = " + str(10 | 12))

# ビットAND
# ビット AND は演算子の左辺と右辺の同じ位置にあるビットを比較して、
# 両方のビットが 1 の場合に 1 にします。
print("10 & 12 = " + str(10 & 12))

# ビットXOR
# ビット XOR は演算子の左辺と右辺の同じ位置にあるビットを比較して、
# どちらか 1 つだけ 1 の場合に 1 にします。
print("10 ^ 12 = " + str(10 ^ 12))

# ビットNOT
# ビット NOT は演算子の右辺の値のビットを反転します。
# ビットが 1 なら 0 、ビットが 0 なら 1 にします。
print("~10 = " + str(~10))

# 左シフト
# 左シフトは左辺の値を右辺の値だけ左へシフトします。
print("11 << 2 = " + str(11 << 2))

# 右シフト
# 右シフトは左辺の値を右辺の値だけ右へシフトします。
print("11 >> 1 = " + str(11 >> 1))

# bit演算子の例
n = 3
pattern = []

for i in range(2 ** (n-1)):
    tmp = [False] * (n-1)
    for j in range(n-1):
        if i >> j & 1:
            tmp[j] = True
    pattern.append(tmp)

print(pattern)
